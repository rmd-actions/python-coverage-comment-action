name: Python Coverage Comment
branding:
  icon: "umbrella"
  color: "purple"
description: >
  Publish diff coverage report as PR comment, and create a coverage badge
  to display on the readme.
inputs:
  GITHUB_BASE_URL:
    description: >
      The base URL for the GitHub API, typically used to specify custom endpoints
      for GitHub Enterprise Server (e.g., `https://github.mycompany.com/api/v3`).
      Defaults to `https://api.github.com` for GitHub.com.
    default: "https://api.github.com"
    required: false
  GITHUB_TOKEN:
    description: >
      A GitHub token to write comments and write the badge & coverage data
      to the repository.
      Set to `$ {{ github.token }}` (without the space between `$` and `{`).
    required: true
  GITHUB_PR_RUN_ID:
    description: >
      Only useful on the "workflow_run" part of the workflow.
      Set to `$ {{ github.event.workflow_run.id }}`  (without the space between `$` and `{`).
    required: false
  COMMENT_TEMPLATE:
    description: >
      [Advanced] Specify a different template for the comments that will be written on
      the PR. See the Action README documentation for how to use this properly.
    required: false
  COVERAGE_DATA_BRANCH:
    description: >
      Name of the branch in which coverage data will be stored on the repository.
      Default is 'python-coverage-comment-action-data'. Please make sure that this
      branch is not protected.
      In monorepo setting, see SUBPROJECT_ID.
    default: python-coverage-comment-action-data
    required: false
  COVERAGE_PATH:
    description: >
      Path to the directory under the git root where the coverage data is
      stored. Default is '.'.
    default: "."
    required: false
  COMMENT_ARTIFACT_NAME:
    description: >
      Name of the artifact in which the body of the comment to post on the PR is stored.
      You typically don't have to change this unless you're already using this name for something else.
    default: python-coverage-comment-action
    required: false
  COMMENT_FILENAME:
    description: >
      Name of the file in which the body of the comment to post on the PR is stored.
      In monorepo setting, see SUBPROJECT_ID.
    default: python-coverage-comment-action.txt
    required: false
  SUBPROJECT_ID:
    description: >
      This setting is only necessary if you plan to run the action multiple
      times in the same repository. It will be appended to the value of all the
      settings that need to be unique, so as for the action to avoid mixing up
      results of multiple runs. Ideally, use dashes (`-`) rather than
      underscrores (`_`) to split words, for consistency.
      Affects `COMMENT_FILENAME`, `COVERAGE_DATA_BRANCH`.
    default: null
    required: false
  MINIMUM_GREEN:
    description: >
      If the coverage percentage is above or equal to this value, the badge
      will be green.
    default: 100
    required: false
  MINIMUM_ORANGE:
    description: >
      If the coverage percentage is not green and above or equal to this value,
      the badge will be orange. Otherwise it will be red.
    default: 70
    required: false
  MAX_FILES_IN_COMMENT:
    description: >
      Maximum number of files to display in the comment. If there are more
      files than this number, they will only appear in the workflow summary.
      The selected files are the ones with the most new uncovered lines. The
      closer this number gets to 35, the higher the risk that it reaches
      GitHub's maximum comment size limit of 65536 characters. If you want
      more files, you may need to use a custom comment template.
      (Feel free to open an issue.)
    default: 25
    required: false
  MERGE_COVERAGE_FILES:
    description: >
      If true, will run `coverage combine` before reading the `.coverage` file.
    default: false
  ANNOTATE_MISSING_LINES:
    description: >
      If true, will create an annotation on every line with missing coverage on a pull request.
    default: false
  ANNOTATION_TYPE:
    description: >
      Only relevant if ANNOTATE_MISSING_LINES is set to true. This parameter allows you to choose between
      notice, warning and error as annotation type. For more information look here:
      https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-a-notice-message
    default: warning
  USE_GH_PAGES_HTML_URL:
    description: >
      If true, will use the GitHub Pages URL for the coverage report instead of the raw URL or an htmlpreview.github.io link.
    default: false
  VERBOSE:
    description: >
      Deprecated, see https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging
    default: false
outputs:
  activity_run:
    description: >
      The type of activity that was run. One of `process_pr`, `post_comment`, `save_coverage_data_files`.
  comment_file_written:
    description: >
      A boolean indicating whether a comment file was written to COMMENT_FILENAME or not.
      If so, you'll need to run the action in workflow_run mode to post it. If "false",
      no comment file was written (likely because the comment was already posted to the PR).
      Only available when running in PR mode.
  new_covered_lines:
    description: The number of covered lines in the pull request. (Only available in PR mode)
  new_num_statements:
    description: The number of statements in the pull request. (Only available in PR mode)
  new_percent_covered:
    description: The coverage percentage of the pull request. (Only available in PR mode)
  new_missing_lines:
    description: The number of lines with missing coverage in the pull request. (Only available in PR mode)
  new_excluded_lines:
    description: The number of excluded lines in the pull request. (Only available in PR mode)
  new_num_branches:
    description: The number of branches in the pull request. (Only available in PR mode)
  new_num_partial_branches:
    description: The number of partial branches in the pull request. (Only available in PR mode)
  new_covered_branches:
    description: The number of covered branches in the pull request. (Only available in PR mode)
  new_missing_branches:
    description: The number of branches with missing coverage in the pull request. (Only available in PR mode)
  reference_covered_lines:
    description: The number of covered lines in the base branch. (Only available in PR mode)
  reference_num_statements:
    description: The number of statements in the base branch. (Only available in PR mode)
  reference_percent_covered:
    description: The coverage percentage of the base branch. (Only available in PR mode)
  reference_missing_lines:
    description: The number of lines with missing coverage in the base branch. (Only available in PR mode)
  reference_excluded_lines:
    description: The number of excluded lines in the base branch. (Only available in PR mode)
  reference_num_branches:
    description: The number of branches in the base branch. (Only available in PR mode)
  reference_num_partial_branches:
    description: The number of partial branches in the base branch. (Only available in PR mode)
  reference_covered_branches:
    description: The number of covered branches in the base branch. (Only available in PR mode)
  reference_missing_branches:
    description: The number of branches with missing coverage in the base branch. (Only available in PR mode)
  diff_total_num_lines:
    description: The total number of lines in the diff. (Only available in PR mode)
  diff_total_num_violations:
    description: The total number of lines with missing coverage in the diff. (Only available in PR mode)
  diff_total_percent_covered:
    description: The coverage percentage of the diff. (Only available in PR mode)
  diff_num_changed_lines:
    description: The number of changed lines in the diff. (Only available in PR mode)
runs:
  using: docker
  image: Dockerfile
  env:
    GITHUB_BASE_URL: ${{ inputs.GITHUB_BASE_URL }}
    GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
    GITHUB_PR_RUN_ID: ${{ inputs.GITHUB_PR_RUN_ID }}
    COMMENT_TEMPLATE: ${{ inputs.COMMENT_TEMPLATE }}
    COVERAGE_DATA_BRANCH: ${{ inputs.COVERAGE_DATA_BRANCH }}
    COVERAGE_PATH: ${{ inputs.COVERAGE_PATH }}
    COMMENT_ARTIFACT_NAME: ${{ inputs.COMMENT_ARTIFACT_NAME }}
    COMMENT_FILENAME: ${{ inputs.COMMENT_FILENAME }}
    SUBPROJECT_ID: ${{ inputs.SUBPROJECT_ID }}
    MINIMUM_GREEN: ${{ inputs.MINIMUM_GREEN }}
    MINIMUM_ORANGE: ${{ inputs.MINIMUM_ORANGE }}
    MERGE_COVERAGE_FILES: ${{ inputs.MERGE_COVERAGE_FILES }}
    ANNOTATE_MISSING_LINES: ${{ inputs.ANNOTATE_MISSING_LINES }}
    ANNOTATION_TYPE: ${{ inputs.ANNOTATION_TYPE }}
    VERBOSE: ${{ inputs.VERBOSE }}
